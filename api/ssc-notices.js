import fetch from 'node-fetch'; import * as cheerio from 'cheerio';
const CANDIDATE_URLS=['https://ssc.gov.in/','https://ssc.gov.in/notice-board','https://ssc.gov.in/noticeboard','https://ssc.gov.in/Notices'];
function normalizeCategory(t=''){t=t.toUpperCase();const s=new Set(),a=c=>s.add(c);if(/\bJE\b/.test(t)||t.includes('JUNIOR ENGINEER'))a('JE');if(/\bCHSL\b/.test(t))a('CHSL');if(/\bSTENO\b/.test(t)||t.includes('STENOGRAPHER'))a('STENO');if(/\bCGL\b/.test(t))a('CGL');if(/\bMTS\b/.test(t))a('MTS');if(/\bCAPF\b/.test(t))a('CAPF');if(/\bCPO\b/.test(t))a('CPO');if(/\bGD\b/.test(t))a('GD');if(/\bDEPARTMENTAL\b/.test(t))a('DEPARTMENTAL');return [...s];}
function parseDateNear(txt=''){const m=txt.match(/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+\d{1,2},?\s+\d{4}|\b\d{1,2}\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+\d{4}|\b\d{4}-\d{2}-\d{2}\b|\b\d{1,2}\s*(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s*\d{4}/i);return m?m[0]:'';}
function parseSizeNear(txt=''){const m=txt.match(/\((\d+(?:\.\d+)?)\s*(KB|MB|GB)\)/i);return m?m[0]:'';}
function unique(arr,key='pdf'){const seen=new Set();return arr.filter(x=>{const k=x[key]||x.title;if(seen.has(k))return false;seen.add(k);return true;});}
async function fetchFirstWorking(){for(const url of CANDIDATE_URLS){try{const r=await fetch(url,{headers:{'user-agent':'Mozilla/5.0'}});if(r.ok){const h=await r.text();if(/Notice/i.test(h))return{url,html:h};}}catch(e){}}throw new Error('Could not fetch SSC Notice Board');}
function parseHTML(html,base='https://ssc.gov.in'){const $=cheerio.load(html);const items=[];$('[class*="notice"], [id*="notice"], .notice-list, .notices, .list-group, .card, li').each((i,el)=>{const $el=$(el);const links=$el.find('a[href$=".pdf"], a[href*=".pdf?"]');if(!links.length)return;links.each((j,a)=>{const $a=$(a);const href=new URL($a.attr('href'),base).toString();const title=($a.text()||$a.attr('title')||$el.text()||'').replace(/\s+/g,' ').trim();const blob=($el.text()||'').replace(/\s+/g,' ').trim();const date=parseDateNear(blob);const size=parseSizeNear(blob);const categories=normalizeCategory(title);let view='';const sib=$a.closest('div,li,tr').find('a').filter((k,ax)=>/view|eye|details/i.test($(ax).text())||/view/.test($(ax).attr('href')||''));if(sib.length)view=new URL($(sib[0]).attr('href'),base).toString();items.push({title,pdf:href,view,date,size,categories});});});if(!items.length){$('a[href$=".pdf"]').each((i,a)=>{const $a=$(a);const href=new URL($a.attr('href'),base).toString();const title=($a.text()||$a.attr('title')||'').replace(/\s+/g,' ').trim();const near=$a.closest('li,div,tr,section,article').text().replace(/\s+/g,' ').trim();const date=parseDateNear(near);const size=parseSizeNear(near);const categories=normalizeCategory(title);items.push({title,pdf:href,date,size,categories});});}return unique(items).map(x=>({...x,ts:Date.parse(x.date)||null}));}
export default async function handler(req,res){res.setHeader('Cache-Control','s-maxage=300, stale-while-revalidate=3600');try{const {html,url}=await fetchFirstWorking();const items=parseHTML(html);res.status(200).json({source:url,count:items.length,items});}catch(e){res.status(500).json({error:e.message,items:[]});}}